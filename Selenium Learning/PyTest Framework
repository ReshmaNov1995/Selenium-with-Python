PyTest Framework can be used to write various types of software tests, including unit tests, integration tests, end-to-end tests, and functional tests. 
Its features include parametrized testing, fixtures, and assert re-writing.

File name should start with test_file name. Ex - test_file01.
Method name should have test. Ex - def test_method

import pytest

Note: Pycharm doesn't support pytest.
So, It has to be run either by terminal or command prompt.

In terminal, pytest -v -s -m filename
-v verbose will give some details, -s to print statements, -m marker.

How to work with PyTest Fixtures:
  The purpose of PyTest Fixtures is to provide a fixed baseline upon which tests can reliably & repeatedly execute.
  @pytest.fixture() 
    --executes specific method before every test method.
  @pytest.yield_fixture()
    --executes specific method before & after every test method.
    
    
 Multiple ways to Run TestCases:
  pytest -v -s test_mod.py # run all tests in module/file
  pytest -v -s E:\Automation\Practice_Selenium\PyTest # run all test(from all module) in a path
  pytest -v -s test_module.py::test_method # run specific test method from a module
  
 Marker Types:
    1) Custom Marker/User defined Marker
    2) Skip Marker
    3) xfail Marker
    4) Parametrize Marker
    
1) Custom Marker/User defined Marker:
  @pytest.mark.kr # kr is a user defined name.
  
  terminal ->  pytest -v -s -m kr test_Mark.py # This will run particular marker method alone.
  
2) Skip Marker:
  @pytest.mark.skip # Reason is non mandatory. If reason has not given python will take any reason automatically.
  @pytest.mark.skip(reason="rr")
  
2)a) a=100
@pytest.mark.skipif(condition=a==100, reason="condition is skipped") 
  if condition is true then it 'll be skipped. Else it 'll execute.
  
3) xfail Marker
@pytest.mark.xfail - All the exceptions will be omitted
@pytest.mark.xfail(raises=NameError, reason="condition is failed") - Exception based, If the parameter is true then exception will be omitted. If not it 'll throws exception.
@pytest.mark.xfail(condition= a==200, reason="condition is failed") - same as above but here it is a condition based.

4) Parametrize Marker
  @pytest.mark.parametrize("pass1,pass2,pass3",[(link,user_name,password),(link,user_name,password),(link,user_name,password)])
  Parameters can be passed using parametrize marker. Multiple set of parameter can be passed in this marker as a list format.
  Multiple set of parameters can be run sequentially. 
  
  To run the Multiple set of parameters simultaneously, install # xdist running parallely pip install pytest-xdist.
  terminal -> #pytest -v -s -n 3 PyTest/test_Parameterize.py # -n number of Masters's slave. 3 is a slave(Parameter) count. 




